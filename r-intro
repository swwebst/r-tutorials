###########
# R notes #
###########

# Quick heads up: R is an object-oriented programming language.
# This means that R treats things as elements and applies functions
# to each piece individually. We assign things using an arrow <-

steven <- "my name is steven" # this assigns the string "my name is steven" to an objected called "steven"
numbers <- c(2, 4, 6, 8) # c() is a function called "concatenate". It simply joins elements together.

# What happens if I enter the following into R?

numbers * 2
#[1]  4  8 12 16     
# R multiplies each element of "numbers" by two

#######################
# Reading data into R #
#######################
# Reading data into R can be done a few different ways.
# The method you use depends on the type of data that you have.
# If you have a dataset that is saved as a R dataset (.RData), use the following:
load("data.RData")

# If you have a .csv file (a very common type)...
dat <- read.csv("file.csv")

# A lot of times you will have a Stata file (.dta) that you want to
# load into R. This can be done by using the "foreign" package.
install.packages("foreign") # this is how we always install packages in R
library(foreign) # this is how we load packages into R once they are installed
# After we have done this, we can load in datasets that are from other statistical packages.
dat <- read.dta("stata_file.dta")

##########################
# Descriptive statistics #
##########################
mean(dat$some_variable) # calculates the mean of "some_variable" from the dataset called "dat"
median(dat$some_variable) # calculates the median of "some_variable" from the dataset called "dat"
summary(dat$some_variable) # presents mean, median, standard deviation, etc. 

table(x, y) # gives you a crosstab of x and y 

###################
# Data management #
###################
# Let's create two objects with numbers and call them "x" and "y."
x <- c(2, 4, 6, 8, 10)
y <- c(100, 87, 500, 20, 1)

# If I want to bind these two elements together by column into a new object, I type:
new_object <- cbind(x, y) # cbind() stands for column bind

# If I want to bind these two elements together by row into a new object, I type:
new_object <- rbind(x, y) # rbind() stands for column bind

# R has many different ways it stores data: arrays, vectors, factors, matrices,
# tables, data frames, etc. We can data as certain types as follows:
as.table(data) # stores data as a table
as.vector(data) # stores data as a vector
as.matrix(data) # stores data as a matrix
as.data.frame(data) # stores data as a dataframe

# What if we wanted to build a matrix/table/or dataframe from scratch?
# How to build a table:
	object1 <- rnorm(4, 100) # draws four observations from the normal distribution with mean 100
	object2 <- rnorm(4, 200)
	my_table <- table(object1, object2) # see what this produces

# How to build a matrix:
	my_matrix <- matrix(c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16), nrow=4, ncol=4)
	# This built a 4x4 matrix. The deafult in R is for data entered into matrices to 
	# be entered by column. If I wanted the data to be entered by row, I would modify the code:
	my_matrix <- matrix(c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16), nrow=4, ncol=4, byrow=TRUE)

# How to build a dataframe:
	# Let's say I'm shopping again and I wanted to create a dataset that records how many crackers, chips,
	# fruits, vegetables, etc. that I buy. Here's a way to do that.
	fruit <- 4
	crackers <- 2
	chips <- 3
	vegetables <- 0

	my.data.frame <- data.frame(fruit, crackers, chips, vegetables)

	# Note that I could ahve done all of that within the data.frame() function
    my.data.frame2 <- data.frame(bottles.of.water=2, cookies=3, beer=500)	

# How would I change the value of a variable? Perhaps I didn't really buy 500
# six-packs of beer. Maybe it was only 5 and I somehow pressed the zero key twice.
# I could change the value of "beer" this way:
my.data.frame2$beer[my.data.frame2$beer==500] <- 5 # this reassigns the value of 5 to any row that has the value of 500 in the variable called "beer" in the dataframe "my.data.frame2"

# Creating dummy variables:
# In a lot of the data I use, an individual's partisanship is coded on a 7-point scale:
# 1 = strong democrat; 2 = weak democrat; 3 = independent leaning democrat
# 4 = pure independent; 5 = independent leaning republican; 6 = weak republican; 7 = strong republican
# Let's assume the partisanship measure is stored in a variable called "partyid"

# If I want to create a dummy variable for people who are "strong" partisans, I would do it this way:
strong.partisan <- as.numeric(partyid==1 | partyid==7) # the | operator means "or"
# The as.numeric() function here is assigning a 1 to anyone in my data who is either a strong
# democrat or a strong republican; otherwise, they get assigned a 0.

#####################
# Regression models #
#####################
# Linear model
linear.model <- lm(dependent_variable ~ iv1 + iv2 + iv3 + iv4, data = dat)
# the form is always dv ~ iv. We specify where the data comes from at the end.

# Logit
logit.model <- glm(dv ~ iv + iv + iv, family="binomial"(link="logit"))
# The logit model is the default in R when using family="binomial." This means that we could
# also get a logit by ommitting the (link="logit") part from the code above. By the way,
# glm() stands for generalized linear model.

# Probit
probit.model <- glm(dv ~ iv + iv + iv, family="binomial"(link="probit")) 

#################
# Plotting data #
#################
x <- c(1,2,3,4)
y <- c(5,6,7,8)

plot(x, y) # plots "x" on the x-axis and "y" on the y-axis

# We can also label our graph:
plot(x, y, main = "Graph title", xlab = "Label for x-axis", ylab = "Label for y-axis")

#######################
# Packages to install #
#######################
install.packages("foreign")
install.packages("lmtest")
install.packages("plyr")
install.packages("dplyr")
install.packages("ggplot2")
install.packages("MASS")
install.packages("car")

# These packages are all useful for various things. I won't go into all of them (because I'm lazy),
# but you will end up using them in various classes and for your projects. Google is your friend!
